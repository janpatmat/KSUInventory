/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ksufinal;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.FileOutputStream;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Viver
 */
public class Report extends javax.swing.JFrame {

    /**
     * Creates new form Report
     */
    static String databaseTableName = "";
    static ResultSet rs;
    static sortProduct sortProductClass2 = new sortProduct("report");
    static sortCategory sortCategoryClass2 = new sortCategory("report");
    static sortUOM sortUOMClass2 = new sortUOM("report");
    static sortBS sortBSClass2 = new sortBS("report");
    static sortUser sortUserClass2 = new sortUser("report");
    
    static ArrayList<String> columnArr = new ArrayList<String>();
    
    static String deliveryWithdrawStatement = "";
    static int onceOnly = 0;
    
    static String currentUser = "";
    
    static boolean BSSelectedAll = true;
    static boolean CategorySelectedAll = true;
    static boolean ProductSelectedAll = true;
    static boolean UOMSelectedAll = true;
    static boolean UserSelectedAll = true;
    
    static String title;
    static String street;
    static String city;
    static String contactNum;
    
    public Report() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane3 = new javax.swing.JTabbedPane();
        instructionDialogue = new javax.swing.JDialog();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        reportTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        SupplierBranchCB = new javax.swing.JCheckBox();
        ActionCB = new javax.swing.JCheckBox();
        MinimumCB = new javax.swing.JCheckBox();
        StandardPriceCB = new javax.swing.JCheckBox();
        TransactionCB = new javax.swing.JCheckBox();
        TransactionNoCB = new javax.swing.JCheckBox();
        DateCB = new javax.swing.JCheckBox();
        PriceCB = new javax.swing.JCheckBox();
        ProductNoCB = new javax.swing.JCheckBox();
        ProductNameCB = new javax.swing.JCheckBox();
        UserCB = new javax.swing.JCheckBox();
        QuantityCB = new javax.swing.JCheckBox();
        TotalPriceCB = new javax.swing.JCheckBox();
        UnitOfMeasureCB = new javax.swing.JCheckBox();
        CategoryCB = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        filterProdBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        filterCategoryBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        filterBSBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        filterUOMBtn = new javax.swing.JButton();
        withdrawCB = new javax.swing.JCheckBox();
        deliveryCB = new javax.swing.JCheckBox();
        BelowMinimumCB = new javax.swing.JCheckBox();
        userLabel = new javax.swing.JLabel();
        filterUserBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        fromDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        toDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        changePeriodBtn = new javax.swing.JButton();
        dateComboBox = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        questionMarkIcon = new javax.swing.JLabel();

        instructionDialogue.setMinimumSize(new java.awt.Dimension(292, 198));
        instructionDialogue.setResizable(false);
        instructionDialogue.setType(java.awt.Window.Type.POPUP);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("INSTRUCTIONS");

        javax.swing.GroupLayout instructionDialogueLayout = new javax.swing.GroupLayout(instructionDialogue.getContentPane());
        instructionDialogue.getContentPane().setLayout(instructionDialogueLayout);
        instructionDialogueLayout.setHorizontalGroup(
            instructionDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(instructionDialogueLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(181, Short.MAX_VALUE))
        );
        instructionDialogueLayout.setVerticalGroup(
            instructionDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(instructionDialogueLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(182, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        reportTable.setAutoCreateRowSorter(true);
        reportTable.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        reportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(reportTable);

        jButton1.setText("Print Report");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("NEW REPORT MENU");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Add Columns", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        SupplierBranchCB.setText("Supplier/Branch");
        SupplierBranchCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SupplierBranchCBActionPerformed(evt);
            }
        });

        ActionCB.setText("Withdraw/ Deposit");
        ActionCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionCBActionPerformed(evt);
            }
        });

        MinimumCB.setText("Minimum Qty");
        MinimumCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MinimumCBActionPerformed(evt);
            }
        });

        StandardPriceCB.setText("Standard Price");
        StandardPriceCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StandardPriceCBActionPerformed(evt);
            }
        });

        TransactionCB.setSelected(true);
        TransactionCB.setText("Transaction");
        TransactionCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransactionCBActionPerformed(evt);
            }
        });

        TransactionNoCB.setText("Transaction No.");
        TransactionNoCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransactionNoCBActionPerformed(evt);
            }
        });

        DateCB.setText("Date");
        DateCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateCBActionPerformed(evt);
            }
        });

        PriceCB.setText("Price");
        PriceCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PriceCBActionPerformed(evt);
            }
        });

        ProductNoCB.setText("Product No.");
        ProductNoCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductNoCBActionPerformed(evt);
            }
        });

        ProductNameCB.setText("Product Name");
        ProductNameCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductNameCBActionPerformed(evt);
            }
        });

        UserCB.setText("User");
        UserCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserCBActionPerformed(evt);
            }
        });

        QuantityCB.setText("Quantity");
        QuantityCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuantityCBActionPerformed(evt);
            }
        });

        TotalPriceCB.setText("Total Price");
        TotalPriceCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TotalPriceCBActionPerformed(evt);
            }
        });

        UnitOfMeasureCB.setText("Unit of Measure");
        UnitOfMeasureCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UnitOfMeasureCBActionPerformed(evt);
            }
        });

        CategoryCB.setText("Category");
        CategoryCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoryCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MinimumCB)
                    .addComponent(TransactionCB)
                    .addComponent(StandardPriceCB)
                    .addComponent(UserCB))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DateCB)
                            .addComponent(TransactionNoCB)
                            .addComponent(PriceCB))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(QuantityCB)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(ProductNoCB)
                                .addGap(18, 18, 18)
                                .addComponent(CategoryCB))
                            .addComponent(ProductNameCB)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SupplierBranchCB)
                            .addComponent(ActionCB))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(UnitOfMeasureCB)
                            .addComponent(TotalPriceCB))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(TransactionCB)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MinimumCB)
                            .addComponent(DateCB)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProductNoCB)
                            .addComponent(CategoryCB))
                        .addGap(18, 18, 18)
                        .addComponent(ProductNameCB)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(StandardPriceCB)
                            .addComponent(PriceCB)
                            .addComponent(QuantityCB)))
                    .addComponent(TransactionNoCB))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(SupplierBranchCB)
                        .addComponent(TotalPriceCB))
                    .addComponent(UserCB))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ActionCB)
                    .addComponent(UnitOfMeasureCB))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Transaction Filters", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        jLabel3.setText("Product");

        filterProdBtn.setText("Select Filter");
        filterProdBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterProdBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("Category");

        filterCategoryBtn.setText("Select Filter");
        filterCategoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterCategoryBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("Supplier & Branch");

        filterBSBtn.setText("Select Filter");
        filterBSBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterBSBtnActionPerformed(evt);
            }
        });

        jLabel6.setText("Unit of measure");

        filterUOMBtn.setText("Select Filter");
        filterUOMBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterUOMBtnActionPerformed(evt);
            }
        });

        withdrawCB.setText("Withdraw");
        withdrawCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawCBActionPerformed(evt);
            }
        });

        deliveryCB.setText("Delivery");
        deliveryCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deliveryCBActionPerformed(evt);
            }
        });

        BelowMinimumCB.setText("Below minimum");
        BelowMinimumCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BelowMinimumCBActionPerformed(evt);
            }
        });

        userLabel.setText("User");

        filterUserBtn.setText("Select Filter");
        filterUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterUserBtnActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel7.setText("From");

        jLabel8.setText("To");

        changePeriodBtn.setText("Change Period");
        changePeriodBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                changePeriodBtnMouseClicked(evt);
            }
        });
        changePeriodBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePeriodBtnActionPerformed(evt);
            }
        });

        dateComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Today", "Yesterday", "This Week", "This Month", "This Year" }));
        dateComboBox.setSelectedItem("This Week");
        dateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(changePeriodBtn))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel8)
                        .addGap(10, 10, 10)
                        .addComponent(toDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(fromDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(dateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(dateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(fromDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(41, 41, 41))
                    .addComponent(jLabel8)
                    .addComponent(toDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(changePeriodBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton2.setText("Refresh All Filter");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(userLabel)
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterUserBtn)
                            .addComponent(filterUOMBtn)
                            .addComponent(filterBSBtn)
                            .addComponent(filterProdBtn)
                            .addComponent(filterCategoryBtn)))
                    .addComponent(BelowMinimumCB)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(withdrawCB)
                        .addGap(7, 7, 7)
                        .addComponent(deliveryCB)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(filterProdBtn))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filterCategoryBtn)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(filterBSBtn))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(filterUOMBtn))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(userLabel)
                            .addComponent(filterUserBtn))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(withdrawCB)
                            .addComponent(deliveryCB)))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BelowMinimumCB)
                        .addContainerGap(21, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addContainerGap())))
        );

        questionMarkIcon.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        questionMarkIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ksufinal/QuestionMark.png"))); // NOI18N
        questionMarkIcon.setMaximumSize(new java.awt.Dimension(880, 800));
        questionMarkIcon.setMinimumSize(new java.awt.Dimension(880, 800));
        questionMarkIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                questionMarkIconMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                questionMarkIconMouseExited(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1038, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(224, 224, 224)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1)
                    .addComponent(questionMarkIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(questionMarkIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TransactionCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransactionCBActionPerformed
        sortBSClass2.BSSortStatement = "";
        sortCategoryClass2.categorySortStatement = "";
        sortProductClass2.prodSortStatement = "";
        sortUOMClass2.UOMSortStatement = "";
        sortUserClass2.UserSortStatement = "";
        
        if (TransactionCB.isSelected()){
            
            //disselect
            BelowMinimumCB.setSelected(false);
            StandardPriceCB.setSelected(false);
            MinimumCB.setSelected(false);
            
            //disabled checkbox
            BelowMinimumCB.setEnabled(false);
            StandardPriceCB.setEnabled(false);
            MinimumCB.setEnabled(false);
            
            //enabled checkbox
            TransactionNoCB.setEnabled(true);
            DateCB.setEnabled(true);
            PriceCB.setEnabled(true);
            SupplierBranchCB.setEnabled(true);
            ActionCB.setEnabled(true);
            UserCB.setEnabled(true);
            
            databaseTableName = "producttrans";
            
            BelowMinimumCB.setSelected(false);
            
            fromDateChooser.setEnabled(true);
            toDateChooser.setEnabled(true);
            dateComboBox.setEnabled(true);
            changePeriodBtn.setEnabled(true);
            
            filterProdBtn.setEnabled(true);
            filterCategoryBtn.setEnabled(true);
            filterBSBtn.setEnabled(true);
            filterUOMBtn.setEnabled(true);
            filterUserBtn.setEnabled(true);
            
            deliveryCB.setEnabled(true);
            withdrawCB.setEnabled(true);
            deliveryCB.setSelected(true);
            withdrawCB.setSelected(true);
            

        }
        else{
            //disselect
            TransactionNoCB.setSelected(false);
            DateCB.setSelected(false);
            PriceCB.setSelected(false);
            SupplierBranchCB.setSelected(false);
            ActionCB.setSelected(false);
            UserCB.setSelected(false);
            
            //disabled checkbox
            TransactionNoCB.setEnabled(false);
            DateCB.setEnabled(false);
            PriceCB.setEnabled(false);
            SupplierBranchCB.setEnabled(false);
            ActionCB.setEnabled(false);
            UserCB.setEnabled(false);
            
            //enabled checkbox
            BelowMinimumCB.setEnabled(true);
            StandardPriceCB.setEnabled(true);
            MinimumCB.setEnabled(true);

            databaseTableName = "producttable";
            
            fromDateChooser.setEnabled(false);
            toDateChooser.setEnabled(false);
            dateComboBox.setEnabled(false);
            changePeriodBtn.setEnabled(false);
//            
            filterProdBtn.setEnabled(false);
            filterCategoryBtn.setEnabled(false);
            filterBSBtn.setEnabled(false);
            filterUOMBtn.setEnabled(false);
            filterUserBtn.setEnabled(false);
            
            deliveryCB.setEnabled(false);
            withdrawCB.setEnabled(false);
            deliveryCB.setSelected(false);
            withdrawCB.setSelected(false);
            
            
        }
        
//        System.out.println(databaseTableName);
        
        setColumnInTable();
        sortFunction();
    }//GEN-LAST:event_TransactionCBActionPerformed

    private void ProductNameCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductNameCBActionPerformed
        setColumnInTable();
        sortFunction();
    }//GEN-LAST:event_ProductNameCBActionPerformed

    private void TransactionNoCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransactionNoCBActionPerformed
        setColumnInTable();
        sortFunction();
    }//GEN-LAST:event_TransactionNoCBActionPerformed

    private void ProductNoCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductNoCBActionPerformed
        setColumnInTable();
        sortFunction();
    }//GEN-LAST:event_ProductNoCBActionPerformed

    private void DateCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateCBActionPerformed
        setColumnInTable();
        sortFunction();
    }//GEN-LAST:event_DateCBActionPerformed

    private void QuantityCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuantityCBActionPerformed
        setColumnInTable();
        sortFunction();
    }//GEN-LAST:event_QuantityCBActionPerformed

    private void MinimumCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MinimumCBActionPerformed
        setColumnInTable();
        sortFunction();
    }//GEN-LAST:event_MinimumCBActionPerformed

    private void CategoryCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoryCBActionPerformed
        setColumnInTable();
        sortFunction();
    }//GEN-LAST:event_CategoryCBActionPerformed

    private void StandardPriceCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StandardPriceCBActionPerformed
        setColumnInTable();
        sortFunction();
    }//GEN-LAST:event_StandardPriceCBActionPerformed

    private void PriceCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PriceCBActionPerformed
        setColumnInTable();
        sortFunction();
    }//GEN-LAST:event_PriceCBActionPerformed

    private void TotalPriceCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TotalPriceCBActionPerformed
        setColumnInTable();
        sortFunction();
    }//GEN-LAST:event_TotalPriceCBActionPerformed

    private void SupplierBranchCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SupplierBranchCBActionPerformed
        setColumnInTable();
        sortFunction();
    }//GEN-LAST:event_SupplierBranchCBActionPerformed

    private void UnitOfMeasureCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UnitOfMeasureCBActionPerformed
        setColumnInTable();
        sortFunction();
    }//GEN-LAST:event_UnitOfMeasureCBActionPerformed

    private void ActionCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActionCBActionPerformed
        setColumnInTable();
        sortFunction();
    }//GEN-LAST:event_ActionCBActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       instructionDialogue.setLocationRelativeTo(this);
    }//GEN-LAST:event_formWindowOpened

    private void filterProdBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterProdBtnActionPerformed
        sortProductClass2.setVisible(true);
        sortProductClass2.setDefaultCloseOperation(sortProductClass2.HIDE_ON_CLOSE);
        sortProductClass2.openWindowAction();
    }//GEN-LAST:event_filterProdBtnActionPerformed

    private void filterCategoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterCategoryBtnActionPerformed

        sortCategoryClass2.setVisible(true);
        sortCategoryClass2.setDefaultCloseOperation(sortCategoryClass2.HIDE_ON_CLOSE);
        sortCategoryClass2.openWindowAction();
    }//GEN-LAST:event_filterCategoryBtnActionPerformed

    private void filterBSBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterBSBtnActionPerformed
         sortBSClass2.setVisible(true);
         sortBSClass2.setDefaultCloseOperation(sortBSClass2.HIDE_ON_CLOSE);
         sortBSClass2.openWindowAction();
    }//GEN-LAST:event_filterBSBtnActionPerformed

    private void filterUOMBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterUOMBtnActionPerformed
         sortUOMClass2.setVisible(true);
         sortUOMClass2.setDefaultCloseOperation(sortUOMClass2.HIDE_ON_CLOSE);
         sortUOMClass2.openWindowAction();
    }//GEN-LAST:event_filterUOMBtnActionPerformed

    private void BelowMinimumCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BelowMinimumCBActionPerformed
        sortFunction();
    }//GEN-LAST:event_BelowMinimumCBActionPerformed

    private void withdrawCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawCBActionPerformed
        sortFunction();
    }//GEN-LAST:event_withdrawCBActionPerformed

    private void deliveryCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deliveryCBActionPerformed
        sortFunction();
    }//GEN-LAST:event_deliveryCBActionPerformed

    private void changePeriodBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePeriodBtnActionPerformed

        if (fromDateChooser.getDate() == null || toDateChooser.getDate() == null){
            JOptionPane.showMessageDialog(null,"Please input a period or uncheck the Edit Period checkbox");
        }else{
            sortFunction();
        }

    }//GEN-LAST:event_changePeriodBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        printInvoice();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void UserCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserCBActionPerformed
        setColumnInTable();
        sortFunction();
    }//GEN-LAST:event_UserCBActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
        
        Login.MenuClass.setVisible(true);
    }//GEN-LAST:event_formWindowClosing
    public void openWindowAction(){
        
//        if (!currentUser.equals(Login.fullName)){
            
            if (!Login.admin){
                UserCB.setVisible(false);
                userLabel.setVisible(false);
//                UserSortTF.setVisible(false);
                filterUserBtn.setVisible(false);
            }
            else{
                UserCB.setVisible(true);
                userLabel.setVisible(true);
//                UserSortTF.setVisible(true);
                filterUserBtn.setVisible(true);
            }
            
            DefaultTableModel reportTableModel = (DefaultTableModel) reportTable.getModel();
            reportTableModel.setColumnCount(0);

            TransactionNoCB.setSelected(false);
            ProductNoCB.setSelected(false);
            DateCB.setSelected(false);
            BelowMinimumCB.setSelected(false);
            CategoryCB.setSelected(false);
            MinimumCB.setSelected(false);
            PriceCB.setSelected(false);
            ProductNameCB.setSelected(false);
            QuantityCB.setSelected(false);
            StandardPriceCB.setSelected(false);
            SupplierBranchCB.setSelected(false);
            TotalPriceCB.setSelected(false);
            ActionCB.setSelected(false);
            UnitOfMeasureCB.setSelected(false);
            UserCB.setSelected(false);
//            editDateCB.setSelected(false);
            withdrawCB.setSelected(true);
            deliveryCB.setSelected(true);
//            dateComboBox.setEnabled(false);

//            BSSortTF.setText("All");
//            CategorySortTF.setText("All");
//            UOMSortTF.setText("All");
//            prodSortTF.setText("All");

            BSSelectedAll = true;
            CategorySelectedAll = true;
            ProductSelectedAll = true;
            UOMSelectedAll = true;
            UserSelectedAll = true;


            LocalDate currentDate = LocalDate.now();
            LocalDate lastWeekDate = currentDate.minusWeeks(1);
            Date date1 = Date.from(lastWeekDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            Date date2 = Date.from(currentDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            fromDateChooser.setDate(date1);
            toDateChooser.setDate(date2);
            dateComboBox.setSelectedItem("This Week");
            
            
            BelowMinimumCB.setEnabled(false);
            StandardPriceCB.setEnabled(false);
            MinimumCB.setEnabled(false);

            databaseTableName = "producttrans";
            
            setColumnInTable();
            currentUser = Login.fullName;
            
            
            
            try{
                
                ResultSet rs = KsuFinal.con.createStatement().executeQuery("SELECT * FROM expenses.inventoryinfo;");

                rs.next();

                title = rs.getString("title");
                street = rs.getString("street");
                city = rs.getString("city");
                contactNum = rs.getString("contactNum");
                
            }catch (Exception ex){
                
            }
//        }
    }
    
    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus

    }//GEN-LAST:event_formWindowGainedFocus

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        
        
    }//GEN-LAST:event_formWindowActivated

    private void filterUserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterUserBtnActionPerformed
         sortUserClass2.setVisible(true);
         sortUserClass2.setDefaultCloseOperation(sortUserClass2.HIDE_ON_CLOSE);
         sortUserClass2.openWindowAction();
    }//GEN-LAST:event_filterUserBtnActionPerformed

    private void questionMarkIconMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_questionMarkIconMouseEntered
        instructionDialogue.setVisible(true);
    }//GEN-LAST:event_questionMarkIconMouseEntered

    private void questionMarkIconMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_questionMarkIconMouseExited
        instructionDialogue.setVisible(false);
    }//GEN-LAST:event_questionMarkIconMouseExited

    private void dateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboBoxActionPerformed
        LocalDate currentDate = LocalDate.now();

        if (dateComboBox.getSelectedItem().toString().equals("Today")){
            Date date1 = Date.from(currentDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            fromDateChooser.setDate(date1);
            toDateChooser.setDate(date1);
        }
        else if (dateComboBox.getSelectedItem().toString().equals("Yesterday")){
            LocalDate yesterdayDate = currentDate.minusDays(1);
            Date date1 = Date.from(yesterdayDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            fromDateChooser.setDate(date1);
            toDateChooser.setDate(date1);
        }

        else if (dateComboBox.getSelectedItem().toString().equals("This Week")){
            LocalDate lastWeekDate = currentDate.minusWeeks(1);
            Date date1 = Date.from(lastWeekDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            Date date2 = Date.from(currentDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            fromDateChooser.setDate(date1);
            toDateChooser.setDate(date2);
        }

        else if (dateComboBox.getSelectedItem().toString().equals("This Month")){
            LocalDate lastMonthDate = currentDate.minusMonths(1);
            Date date1 = Date.from(lastMonthDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            Date date2 = Date.from(currentDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            fromDateChooser.setDate(date1);
            toDateChooser.setDate(date2);
        }

        else if (dateComboBox.getSelectedItem().toString().equals("This Year")){
            LocalDate lastYearDate = currentDate.minusYears(1);
            Date date1 = Date.from(lastYearDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            Date date2 = Date.from(currentDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            fromDateChooser.setDate(date1);
            toDateChooser.setDate(date2);
        }

    }//GEN-LAST:event_dateComboBoxActionPerformed

    private void changePeriodBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changePeriodBtnMouseClicked

    }//GEN-LAST:event_changePeriodBtnMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        sortBSClass2.BSSortStatement = "";
        sortCategoryClass2.categorySortStatement = "";
        sortProductClass2.prodSortStatement = "";
        sortUOMClass2.UOMSortStatement = "";
        sortUserClass2.UserSortStatement = "";

        BSSelectedAll = true;
        CategorySelectedAll = true;
        ProductSelectedAll = true;
        UOMSelectedAll = true;
        UserSelectedAll = true;

        dateComboBox.setSelectedItem("This Week");

        LocalDate currentDate = LocalDate.now();
        LocalDate lastWeekDate = currentDate.minusWeeks(1);
        Date date1 = Date.from(lastWeekDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
        Date date2 = Date.from(currentDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
        fromDateChooser.setDate(date1);
        toDateChooser.setDate(date2);
        
        setColumnInTable();
        sortFunction();

    }//GEN-LAST:event_jButton2ActionPerformed

    
    
    
    public static void setColumnInTable(){
        
        DefaultTableModel reportTableModel = (DefaultTableModel) reportTable.getModel();
        
        reportTableModel.setColumnCount(0);
        
        columnArr.clear();
        
        if (TransactionNoCB.isSelected()){
            reportTableModel.addColumn("Transaction No.");
            columnArr.add("TransactionNo");
        }   
    
        if (ProductNoCB.isSelected()){
            reportTableModel.addColumn("Product No.");
            if (databaseTableName.equals("producttrans")){
                columnArr.add("prodID");
            }
            else{
                columnArr.add("productID");
            }
        }
        
        if (DateCB.isSelected()){
            reportTableModel.addColumn("Date");
            columnArr.add("Date");
//            fromDateChooser.setEnabled(true);
//            toDateChooser.setEnabled(true);
//            dateComboBox.setEnabled(true);
//            changePeriodBtn.setEnabled(true);
            
           
            
        }
        else{
//            fromDateChooser.setEnabled(false);
//            toDateChooser.setEnabled(false);
//            dateComboBox.setEnabled(false);
//            changePeriodBtn.setEnabled(false);
            
//            fromDateChooser.setDate(null);
//            toDateChooser.setDate(null);
        }
        
        if (ProductNameCB.isSelected()){
            reportTableModel.addColumn("Product Name");
            if (databaseTableName.equals("producttrans")){
                columnArr.add("Name");
            }
            else{
                columnArr.add("productName");
            }
        }
        
        if (QuantityCB.isSelected()){
            reportTableModel.addColumn("Quantity");
            if (databaseTableName.equals("producttrans")){
                columnArr.add("Quantity");
            }
            else{
                columnArr.add("productQuantity");
            }
        }
        
        if (MinimumCB.isSelected()){
            reportTableModel.addColumn("Minimum Quantity");
            columnArr.add("prodMinq");
        }
        
        if (CategoryCB.isSelected()){
            reportTableModel.addColumn("Category");
//            filterCategoryBtn.setEnabled(true);
            columnArr.add("Sub");
        }
//        else{
//            filterCategoryBtn.setEnabled(false);
////            CategorySortTF.setText("All");
//        }
        
        if (StandardPriceCB.isSelected()){
            reportTableModel.addColumn("Standard Price");
            columnArr.add("standardPrice");
        }
        
        if (PriceCB.isSelected()){
            reportTableModel.addColumn("Price");
            columnArr.add("Price");
        }
        
        if (TotalPriceCB.isSelected()){
            reportTableModel.addColumn("Total Price");
            columnArr.add("TotalPrice");
        }
        
        if (SupplierBranchCB.isSelected()){
            reportTableModel.addColumn("Supplier/Branch");
//            filterBSBtn.setEnabled(true);
            columnArr.add("SuppBranch");
        }
//        else{
//            filterBSBtn.setEnabled(false);
////            BSSortTF.setText("All");
//        }
        
        if (UnitOfMeasureCB.isSelected()){
            reportTableModel.addColumn("Unit of Measure");
//            filterUOMBtn.setEnabled(true);
            columnArr.add("Unit");
        }
//        else{
//            filterUOMBtn.setEnabled(false);
////            UOMSortTF.setText("All");
//        }
        
        if (ActionCB.isSelected()){
            reportTableModel.addColumn("Action");
//            deliveryCB.setEnabled(true);
//            withdrawCB.setEnabled(true);
//            deliveryCB.setSelected(true);
//            withdrawCB.setSelected(true);
            columnArr.add("Action");
        }
//        else{
//            deliveryCB.setEnabled(false);
//            withdrawCB.setEnabled(false);
//            deliveryCB.setSelected(false);
//            withdrawCB.setSelected(false);
//        }
        
//        if (UserCB.isSelected()){
//            reportTableModel.addColumn("User");
//            filterUserBtn.setEnabled(true);
//            columnArr.add("Transby");
//        }
//        else{
//            filterUserBtn.setEnabled(false);
////            UserSortTF.setText("All");
//        }
        
//        if ((ProductNoCB.isSelected() || ProductNameCB.isSelected()) && TransactionCB.isSelected()){
//            filterProdBtn.setEnabled(true);
//            
//        }
//        else{
//            filterProdBtn.setEnabled(false);
////            prodSortTF.setText("All");
//        }
        
        if (Login.admin && UserCB.isSelected() && databaseTableName.equals("producttrans")){
            reportTableModel.addColumn("User");
            columnArr.add("Transby");
        }
        
//        System.out.println(Arrays.deepToString(columnArr.toArray(new String[columnArr.size()])));
    }
    
    public static void sortFunction(){
        DefaultTableModel ReportTableModel = (DefaultTableModel) reportTable.getModel();
        Boolean notChange = true;
        ArrayList<String> strArr = new ArrayList<String>();
        
        if (deliveryCB.isSelected()){
            strArr.add("Action = 'deposit'");
        }
        if (withdrawCB.isSelected()){
            strArr.add("Action = 'withdraw'");
        }
        
        deliveryWithdrawStatement = " (" + String.join(" or ", strArr) + ") ";
        
        ArrayList<String> finalArr = new ArrayList<String>();
        
        if (ProductSelectedAll){
            
        }
//        if(prodSortTF.getText().equals("All")){
//            //do Nothing
//        }
        else if(sortProductClass2.prodSortStatement.length() > 5){
            finalArr.add(sortProductClass2.prodSortStatement);
        }
        else{
            ReportTableModel.setRowCount(0);
//            JOptionPane.showMessageDialog(null,"Please select a product");
            notChange = false;
        }
        
        if (UOMSelectedAll){
            
        }
//        if (UOMSortTF.getText().equals("All")){
//            //do Nothing
//        }
        else if(sortUOMClass2.UOMSortStatement.length() > 5){
            finalArr.add(sortUOMClass2.UOMSortStatement);
        }
        else{
            ReportTableModel.setRowCount(0);
//            JOptionPane.showMessageDialog(null,"Please select a Unit of Measure");
            notChange = false;
        }
        
        if (BSSelectedAll){
            
        }
//        if (BSSortTF.getText().equals("All")){
//            //do Nothing
//        }
        else if(sortBSClass2.BSSortStatement.length() > 5){
            finalArr.add(sortBSClass2.BSSortStatement);
        }
        else{
            ReportTableModel.setRowCount(0);
//            JOptionPane.showMessageDialog(null,"Please select a Branch or Supplier");
            notChange = false;
        }
        
        if (CategorySelectedAll){
            
        }
//        if (CategorySortTF.getText().equals("All")){
//            //do Nothing
//        }
        else if(sortCategoryClass2.categorySortStatement.length() > 5){
            finalArr.add(sortCategoryClass2.categorySortStatement);
        }
        else{
            ReportTableModel.setRowCount(0);
//            JOptionPane.showMessageDialog(null,"Please select a Category");
            notChange = false;
        }
        
        if (Login.admin){
            if (UserSelectedAll){
                
            }
//            if (UserSortTF.getText().equals("All")){
//                //do Nothing
//            }
            else if(sortUserClass2.UserSortStatement.length() > 5){

                finalArr.add(sortUserClass2.UserSortStatement);
            }
            else{
                ReportTableModel.setRowCount(0);
//                JOptionPane.showMessageDialog(null,"Please select a User", "Error", JOptionPane.ERROR_MESSAGE);
                notChange = false;
            }
        }
        
        if (deliveryWithdrawStatement.length() > 5){
            finalArr.add(deliveryWithdrawStatement);
        }
        else if (!ActionCB.isSelected()){
            //do nothing
        }
        else{
            ReportTableModel.setRowCount(0);
//            JOptionPane.showMessageDialog(null,"Please select if either withdraw or deposit");
            notChange = false;
        }
        
//        if (!Login.admin && databaseTableName.equals("producttrans")){
//            finalArr.add(" (Transby = '" + Login.fullName + "') ");
//        }
//        
        
        if (notChange){

            String finalStatement = "SELECT * FROM expenses." + databaseTableName;
            
            if (databaseTableName.equals("producttrans")){
                SimpleDateFormat dFormat = new SimpleDateFormat("yyyy-MM-dd");
                String fdate = dFormat.format(fromDateChooser.getDate());
                String tdate = dFormat.format(toDateChooser.getDate());
                
                finalArr.add(" Date BETWEEN '" + fdate + "' AND '" + tdate + "'");
            }
            
            if (finalArr.size() > 0){
                finalStatement += " WHERE";
                finalStatement += String.join("AND", finalArr);
            }
            

            System.out.println(finalStatement);
//            if (DateCB.isSelected()){
                try{
//                    SimpleDateFormat dFormat = new SimpleDateFormat("yyyy-MM-dd");
//                    String fdate = dFormat.format(fromDateChooser.getDate()); 
//                    String tdate = dFormat.format(toDateChooser.getDate());
                    ReportTableModel.setRowCount(0);
                    try{
                        rs = KsuFinal.con.createStatement().executeQuery(finalStatement);
                        while(rs.next()){
//                            System.out.println("in");
                            ArrayList<String> tempArr = new ArrayList<String>();
                            for (String x: columnArr){
                                if (x.equals("TotalPrice")){
                                    if (databaseTableName.equals("producttrans")){
                                        tempArr.add(String.valueOf(Math.abs(Math.round((Float.parseFloat(rs.getString("Quantity")) * Float.parseFloat(rs.getString("Price"))) * 100) / 100)));
                                    }else{
                                        tempArr.add(String.valueOf(Math.abs(Math.round((Float.parseFloat(rs.getString("productQuantity")) * Float.parseFloat(rs.getString("standardPrice"))) * 100) / 100)));
                                    }
                                }
                                else{
                                    tempArr.add(rs.getString(x));
                                }
                            }
//                            String dt = rs.getString("Date");

//
//                            Date currdate = dFormat.parse(dt);
//                            Date fromDate = dFormat.parse(fdate);
//                            Date toDate = dFormat.parse(tdate);
                            
//                            if (((currdate.after(fromDate) && currdate.before(toDate)) || currdate.equals(fromDate) || currdate.equals(toDate)) && (fromDate.before(toDate) || fromDate.equals(toDate))){
                                
                                if (BelowMinimumCB.isSelected()){
                                    if (Integer.parseInt(rs.getString("productQuantity")) <= Integer.parseInt(rs.getString("prodMinq"))){
                                        String[] item = tempArr.toArray(new String[tempArr.size()]);
                                        ReportTableModel.addRow(item);
                                    }
                                }
                                else{
                                    String[] item = tempArr.toArray(new String[tempArr.size()]);
                                    ReportTableModel.addRow(item);
                                }
//                            }

                        }
//                        JOptionPane.showMessageDialog(this,"Filtered Successfully!");
                    }
                    catch(Exception e){
                        System.out.println(e);
                    }
                }catch(NullPointerException ex){
                    JOptionPane.showMessageDialog(null,"Please input a period or uncheck the Edit Period checkbox");
                }

//            }else{
//                ReportTableModel.setRowCount(0);
//                try{
//                    rs = KsuFinal.con.createStatement().executeQuery(finalStatement);
//                    while(rs.next()){
//                        ArrayList<String> tempArr = new ArrayList<String>();
//                        for (String x: columnArr){
//                            if (x.equals("TotalPrice")){
//                                if (databaseTableName.equals("producttrans")){
//                                    tempArr.add(String.valueOf(Math.round((Float.parseFloat(rs.getString("Quantity")) * Float.parseFloat(rs.getString("Price"))) * 100) / 100));
//                                }else{
//                                    tempArr.add(String.valueOf(Math.round((Float.parseFloat(rs.getString("productQuantity")) * Float.parseFloat(rs.getString("standardPrice"))) * 100) / 100));
//                                }
//                            }
//                            else{
//                                tempArr.add(rs.getString(x));
//                            }
//                        }
//
//                        if (BelowMinimumCB.isSelected()){
//                            if (Integer.parseInt(rs.getString("productQuantity")) <= Integer.parseInt(rs.getString("prodMinq"))){
//                                String[] item = tempArr.toArray(new String[tempArr.size()]);
//                                System.out.println("Below Minimum Selected" + Arrays.deepToString(item));
//                                ReportTableModel.addRow(item);
//                            }
//                        }
//                        else{
//                            String[] item = tempArr.toArray(new String[tempArr.size()]);
//                            System.out.println("Below Minimum Not Selected" + Arrays.deepToString(item));
//                            ReportTableModel.addRow(item);
//                        }
//                    }
////                    JOptionPane.showMessageDialog(this,"Filtered Successfully!");
//                }
//                catch(Exception e){
//                    System.out.println(e);
//                }
//            }
        }
    }
    
    public void printInvoice(){
        Document doc = new Document();
        PdfWriter docWriter = null;
        
        String currentDate = java.time.LocalDate.now().toString();
        
        try{
            Font textInvoice = new Font(Font.FontFamily.HELVETICA, 30, Font.BOLD, new BaseColor(0, 0, 0));
            Font textBilledTo = new Font(Font.FontFamily.HELVETICA, 17, Font.BOLD, new BaseColor(0, 0, 0));
            Font textBold12 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD, new BaseColor(0, 0, 0));
            Font text12 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, new BaseColor(0, 0, 0));
            docWriter = PdfWriter.getInstance(doc, new FileOutputStream("Report.pdf"));
            doc.open();
            int pdfWidth = columnArr.size();
            float perWidth = 100/pdfWidth;
            
            float[] columnWidths = new float[pdfWidth];
            for (int x = 0; x < pdfWidth; x++){
                columnWidths[x] = (float)perWidth;
            }
//            for (float x: columnWidths){
//                System.out.println(x);
//            }
            
            PdfPTable texts = new PdfPTable(columnWidths);
            
            
            Paragraph paragraph = new Paragraph();
            
            createcell(texts, "Date Issued: " + currentDate, Element.ALIGN_RIGHT, pdfWidth, text12, 0, 255, 255, 255);       
            
            createcell(texts, "REPORT", Element.ALIGN_CENTER, pdfWidth, textBilledTo, 0, 255, 255, 255);
            createcell(texts, title , Element.ALIGN_CENTER, pdfWidth, textBold12, 0, 255, 255, 255);
            createcell(texts, street + " St., " + city + " City", Element.ALIGN_CENTER, pdfWidth, text12, 0, 255, 255, 255);
            createcell(texts, "Contact#: " + contactNum, Element.ALIGN_CENTER, pdfWidth, text12, 0, 255, 255, 255);
            
            createcell(texts, "______________________________________________________________________________________", Element.ALIGN_CENTER, pdfWidth, text12, 0, 255, 255, 255);
            
            createcell(texts, "PRINTED BY " + Login.fullName, Element.ALIGN_LEFT, pdfWidth, textBold12, 0, 255, 255, 255);     
            createSpace(texts, pdfWidth);
            
            
            
            
            for (int x = 0; x < pdfWidth; x++){
                createcell(texts, reportTable.getColumnName(x), Element.ALIGN_CENTER, 1, text12, 0, 179, 179, 179);
            }
            int z;
            for (z = 0; z < reportTable.getColumnCount(); z++){
                if (reportTable.getColumnName(z).equals("Total Price")){
                    break;
                }
            }
            
            
            createSpace(texts, pdfWidth);
            double totPrice = 0;
            int rowSize = reportTable.getRowCount();
            int x;
            for (x = 0; x < rowSize; x++){
                for (int y = 0; y < pdfWidth; y++){
                    String value = reportTable.getValueAt(x, y).toString();
                    createcell(texts, value, Element.ALIGN_CENTER, 1, text12, 0, 255, 255, 255);
                }
                createSpace(texts, pdfWidth);
                if (TotalPriceCB.isSelected()){
                    totPrice += Double.parseDouble(reportTable.getValueAt(x, z).toString());
                }
            }   
            createcell(texts, "______________________________________________________________________________________", Element.ALIGN_CENTER, pdfWidth, text12, 0, 255, 255, 255);
            if (TotalPriceCB.isSelected()){
                createSpace(texts, pdfWidth);
                createcell(texts, String.format("Summation of Total Price: %.2f", totPrice), Element.ALIGN_LEFT, pdfWidth, textBold12, 0, 255, 255, 255);
                createcell(texts, "No. of Transactions: " + x, Element.ALIGN_LEFT, pdfWidth, textBold12, 0, 255, 255, 255);
            }
            
            
            
            
            texts.setWidthPercentage(100f);
            
            paragraph.add(texts);
            doc.add(paragraph);
        }
        catch(Exception ex){
            System.out.println(ex);
            ex.printStackTrace();
        }
        if (doc != null){
            doc.close();
        }
        
        if (docWriter != null){
            docWriter.close();
        }
        
        try{
            Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler " + "Report.pdf");
        }
        catch(Exception ex){
        }
    }
    
    
    public void createcell(PdfPTable table, String text, int align, int colspan, Font font, int border, int r, int g, int b){
        PdfPCell cell = new PdfPCell(new Phrase(text.trim(), font));
        cell.setHorizontalAlignment(align);
        cell.setColspan(colspan);
        if (border == 0){
            cell.setBorder(Rectangle.NO_BORDER);
        }
        else{
            cell.setBorder(Rectangle.BOX);
        }
        cell.setBackgroundColor(new BaseColor(r, g, b));
        table.addCell(cell);
    }
    
    public void createSpace(PdfPTable table, int pdfWidth){
        PdfPCell cell = new PdfPCell();
        cell.setColspan(pdfWidth);
        cell.setMinimumHeight(15f);
        cell.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Report().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JCheckBox ActionCB;
    public static javax.swing.JCheckBox BelowMinimumCB;
    public static javax.swing.JCheckBox CategoryCB;
    public static javax.swing.JCheckBox DateCB;
    public static javax.swing.JCheckBox MinimumCB;
    public static javax.swing.JCheckBox PriceCB;
    public static javax.swing.JCheckBox ProductNameCB;
    public static javax.swing.JCheckBox ProductNoCB;
    public static javax.swing.JCheckBox QuantityCB;
    public static javax.swing.JCheckBox StandardPriceCB;
    public static javax.swing.JCheckBox SupplierBranchCB;
    public static javax.swing.JCheckBox TotalPriceCB;
    public static javax.swing.JCheckBox TransactionCB;
    public static javax.swing.JCheckBox TransactionNoCB;
    public static javax.swing.JCheckBox UnitOfMeasureCB;
    public static javax.swing.JCheckBox UserCB;
    public static javax.swing.JButton changePeriodBtn;
    public static javax.swing.JComboBox dateComboBox;
    public static javax.swing.JCheckBox deliveryCB;
    public static javax.swing.JButton filterBSBtn;
    public static javax.swing.JButton filterCategoryBtn;
    public static javax.swing.JButton filterProdBtn;
    public static javax.swing.JButton filterUOMBtn;
    public static javax.swing.JButton filterUserBtn;
    public static com.toedter.calendar.JDateChooser fromDateChooser;
    private javax.swing.JDialog instructionDialogue;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JLabel questionMarkIcon;
    public static javax.swing.JTable reportTable;
    public static com.toedter.calendar.JDateChooser toDateChooser;
    private javax.swing.JLabel userLabel;
    public static javax.swing.JCheckBox withdrawCB;
    // End of variables declaration//GEN-END:variables
}
