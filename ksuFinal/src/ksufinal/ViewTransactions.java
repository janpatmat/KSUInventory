package ksufinal;

import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static ksufinal.sortProduct.selectedProducts;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Ricky
 */
public class ViewTransactions extends javax.swing.JFrame {

    AddTransaction transactionClass = new AddTransaction();
    EditProduct prodTrans = new EditProduct();
    
    static sortProduct sortproductClass = new sortProduct("TransReport");
    static sortUOM sortUOMClass = new sortUOM("TransReport");
    static sortBS sortBSClass = new sortBS("TransReport");
    static sortCategory sortCategoryClass = new sortCategory("TransReport");
    static sortUser sortUserClass = new sortUser("TransReport");
    static String deliveryWithdrawStatement = "";
    static String currentUser = "";
    static ResultSet rs;
    static boolean BSSelectedAll = true;
    static boolean CategorySelectedAll = true;
    static boolean ProductSelectedAll = true;
    static boolean UOMSelectedAll = true;
    static boolean UserSelectedAll = true;
//    Withdraw withdrawClass = new Withdraw();
    
    public ViewTransactions() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        button1 = new java.awt.Button();
        instructionDialogue = new javax.swing.JDialog();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TransactionTable = new javax.swing.JTable();
        questionMarkIcon = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        withdrawCB = new javax.swing.JCheckBox();
        deliveryCB = new javax.swing.JCheckBox();
        filterProdBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        CategoryBtn = new javax.swing.JButton();
        userBtn = new javax.swing.JButton();
        userLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        UOMBtn = new javax.swing.JButton();
        BSBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        toDateChooser = new com.toedter.calendar.JDateChooser();
        fromDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        dateCB = new javax.swing.JComboBox();
        changePeriodBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();

        button1.setLabel("button1");

        instructionDialogue.setMinimumSize(new java.awt.Dimension(292, 198));
        instructionDialogue.setResizable(false);
        instructionDialogue.setType(java.awt.Window.Type.POPUP);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("INSTRUCTIONS");

        javax.swing.GroupLayout instructionDialogueLayout = new javax.swing.GroupLayout(instructionDialogue.getContentPane());
        instructionDialogue.getContentPane().setLayout(instructionDialogueLayout);
        instructionDialogueLayout.setHorizontalGroup(
            instructionDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(instructionDialogueLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(181, Short.MAX_VALUE))
        );
        instructionDialogueLayout.setVerticalGroup(
            instructionDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(instructionDialogueLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(182, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1167, 676));
        setMinimumSize(new java.awt.Dimension(1167, 676));
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        TransactionTable.setAutoCreateRowSorter(true);
        TransactionTable.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        TransactionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Trans. ID", "Prod. ID", "Date", "Name", "Category", "Price", "Quantity", "Total Price", "Unit of measure", "Branch/Supplier", "Action"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TransactionTable.setRowHeight(20);
        jScrollPane1.setViewportView(TransactionTable);

        questionMarkIcon.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        questionMarkIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ksufinal/QuestionMark.png"))); // NOI18N
        questionMarkIcon.setMaximumSize(new java.awt.Dimension(880, 800));
        questionMarkIcon.setMinimumSize(new java.awt.Dimension(880, 800));
        questionMarkIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                questionMarkIconMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                questionMarkIconMouseExited(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        withdrawCB.setSelected(true);
        withdrawCB.setText("Withdraw");
        withdrawCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawCBActionPerformed(evt);
            }
        });

        deliveryCB.setSelected(true);
        deliveryCB.setText("Delivery");
        deliveryCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deliveryCBActionPerformed(evt);
            }
        });

        filterProdBtn.setText("Select Filter");
        filterProdBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterProdBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Products");

        jLabel6.setText("Category");

        CategoryBtn.setText("Select Filter");
        CategoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoryBtnActionPerformed(evt);
            }
        });

        userBtn.setText("Select Filter");
        userBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userBtnActionPerformed(evt);
            }
        });

        userLabel.setText("User");

        jLabel4.setText("Unit of Measure");

        jLabel5.setText("Branch/Supplier");

        UOMBtn.setText("Select Filter");
        UOMBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UOMBtnActionPerformed(evt);
            }
        });

        BSBtn.setText("Select Filter");
        BSBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSBtnActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel2.setText("From");

        jLabel3.setText("To");

        dateCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Today", "Yesterday", "This Week", "This Month", "This Year" }));
        dateCB.setSelectedItem("This Week");
        dateCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateCBActionPerformed(evt);
            }
        });

        changePeriodBtn.setText("Change Period");
        changePeriodBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePeriodBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(8, 8, 8)
                        .addComponent(toDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(fromDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(dateCB, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(changePeriodBtn)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addComponent(dateCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(fromDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel3)
                        .addComponent(toDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(changePeriodBtn))
                .addGap(22, 22, 22))
        );

        jButton1.setText("Refresh All Filter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(UOMBtn))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(userLabel)
                                    .addGap(18, 18, 18)
                                    .addComponent(userBtn))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(51, 51, 51)
                                    .addComponent(filterProdBtn)
                                    .addGap(77, 77, 77)
                                    .addComponent(jLabel6)
                                    .addGap(18, 18, 18)
                                    .addComponent(CategoryBtn)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(BSBtn))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(deliveryCB)
                        .addGap(18, 18, 18)
                        .addComponent(withdrawCB)))
                .addGap(78, 78, 78)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(134, 134, 134)
                .addComponent(jButton1)
                .addGap(129, 129, 129))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(80, 80, 80))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deliveryCB)
                            .addComponent(withdrawCB))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel6))
                            .addComponent(CategoryBtn)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel1))
                            .addComponent(filterProdBtn))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BSBtn)
                            .addComponent(userBtn)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(userLabel))))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(UOMBtn)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12))
        );

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("VIEW TRANSACTIONS MENU");
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addGap(450, 450, 450)
                        .addComponent(questionMarkIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(questionMarkIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        instructionDialogue.setLocationRelativeTo(this);
    }//GEN-LAST:event_formWindowOpened
    public void openWindowAction(){
        
        DefaultTableModel transactionTableModel = (DefaultTableModel) TransactionTable.getModel();
        transactionTableModel.setColumnCount(11);
        userLabel.setVisible(false);
        userBtn.setVisible(false);
//        UserSortTF.setVisible(false);
            
        if (Login.admin){
            transactionTableModel.addColumn("User");
            userLabel.setVisible(true);
            userBtn.setVisible(true);
//            UserSortTF.setVisible(true);
        }
        
//        if (!currentUser.equals(Login.fullName)){
            deliveryCB.setSelected(true);
            withdrawCB.setSelected(true);
            fromDateChooser.setDate(null);
            toDateChooser.setDate(null);
//            prodSortTF.setText("All");
//            CategorySortTF.setText("All");
//            UOMSortTF.setText("All");
//            BSSortTF.setText("All");
            BSSelectedAll = true;
            CategorySelectedAll = true;
            ProductSelectedAll = true;
            UOMSelectedAll = true;
            UserSelectedAll = true;
//            editDateCB.setSelected(false);
//            currentUser = Login.fullName;

            dateCB.setSelectedItem("This Week");
//        }
            
        LocalDate currentDate = LocalDate.now();
        LocalDate lastWeekDate = currentDate.minusWeeks(1);
        Date date1 = Date.from(lastWeekDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
        Date date2 = Date.from(currentDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
        fromDateChooser.setDate(date1);
        toDateChooser.setDate(date2);
        
        updateTransReportTable();
        filterFunction();
        
    }
    
    
    private void filterProdBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterProdBtnActionPerformed
        sortproductClass.setVisible(true);
        sortproductClass.setDefaultCloseOperation(sortproductClass.HIDE_ON_CLOSE);
        sortproductClass.openWindowAction();
        
    }//GEN-LAST:event_filterProdBtnActionPerformed

    private void UOMBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UOMBtnActionPerformed
         sortUOMClass.setVisible(true);
         sortUOMClass.setDefaultCloseOperation(sortUOMClass.HIDE_ON_CLOSE);
         sortUOMClass.openWindowAction();
    }//GEN-LAST:event_UOMBtnActionPerformed

    private void BSBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSBtnActionPerformed
         sortBSClass.setVisible(true);
         sortBSClass.setDefaultCloseOperation(sortUOMClass.HIDE_ON_CLOSE);
         sortBSClass.openWindowAction();
    }//GEN-LAST:event_BSBtnActionPerformed

    public static void filterFunction(){
        DefaultTableModel TransactionTableModel = (DefaultTableModel) TransactionTable.getModel();
        
        
        Boolean notChange = true;
        ArrayList<String> strArr = new ArrayList<String>();
        
        if (deliveryCB.isSelected()){
            strArr.add("Action = 'deposit'");
        }
        if (withdrawCB.isSelected()){
            strArr.add("Action = 'withdraw'");
        }
        
        deliveryWithdrawStatement = " (" + String.join(" or ", strArr) + ") ";
        
        
        
        ArrayList<String> finalArr = new ArrayList<String>();
        
        
        if (ProductSelectedAll){
            //Do Nothing
        }
//        if(prodSortTF.getText().equals("All")){
//            
//        }
        else if(sortproductClass.prodSortStatement.length() > 5){
            finalArr.add(sortproductClass.prodSortStatement);
            
        }
        else{
            TransactionTableModel.setRowCount(0);
            JOptionPane.showMessageDialog(null,"Please select a product", "Error", JOptionPane.ERROR_MESSAGE);
            notChange = false;
        }

        if (UOMSelectedAll){
            // Do Nothing
        }
//        if (UOMSortTF.getText().equals("All")){
//            //do Nothing
//        }
        else if(sortUOMClass.UOMSortStatement.length() > 5){
            
            finalArr.add(sortUOMClass.UOMSortStatement);
        }
        else{
            TransactionTableModel.setRowCount(0);
            JOptionPane.showMessageDialog(null,"Please select a Unit of Measure", "Error", JOptionPane.ERROR_MESSAGE);
            notChange = false;
        }
        
        if (BSSelectedAll){
            // Do Nothing
        }
//        if (BSSortTF.getText().equals("All")){
//            //do Nothing
//        }
        else if(sortBSClass.BSSortStatement.length() > 5){
            
            finalArr.add(sortBSClass.BSSortStatement);
        }
        else{
            TransactionTableModel.setRowCount(0);
            JOptionPane.showMessageDialog(null,"Please select a Branch or Supplier", "Error", JOptionPane.ERROR_MESSAGE);
            notChange = false;
        }
        
        
        if (CategorySelectedAll){
            // Do Nothing
        }
//        if (CategorySortTF.getText().equals("All")){
//            //do Nothing
//        }
        else if(sortCategoryClass.categorySortStatement.length() > 5){
            
            finalArr.add(sortCategoryClass.categorySortStatement);
        }
        else{
            TransactionTableModel.setRowCount(0);
            JOptionPane.showMessageDialog(null,"Please select a Category", "Error", JOptionPane.ERROR_MESSAGE);
            notChange = false;
        }
        
        if (Login.admin){
            if (UserSelectedAll){
                // Do Nothing
            }
//            if (UserSortTF.getText().equals("All")){
//                //do Nothing
//            }
            else if(sortUserClass.UserSortStatement.length() > 5){

                finalArr.add(sortUserClass.UserSortStatement);
            }
            else{
                TransactionTableModel.setRowCount(0);
                JOptionPane.showMessageDialog(null,"Please select a User", "Error", JOptionPane.ERROR_MESSAGE);
                notChange = false;
            }
        }
 
        
        if (deliveryWithdrawStatement.length() > 5){
            finalArr.add(deliveryWithdrawStatement);
        }
        else{
            TransactionTableModel.setRowCount(0);
            JOptionPane.showMessageDialog(null,"Please select if either withdraw or deposit", "Error", JOptionPane.ERROR_MESSAGE);
            notChange = false;
        }
        
//        if (!Login.admin){
//            finalArr.add(" (Transby = '" + Login.fullName + "') ");
//        }
        
        if (notChange){
            
            String finalStatement = "SELECT * FROM expenses.producttrans";
            
            SimpleDateFormat dFormat = new SimpleDateFormat("yyyy-MM-dd");
            String fdate = dFormat.format(fromDateChooser.getDate());
            String tdate = dFormat.format(toDateChooser.getDate());

            finalArr.add(" Date BETWEEN '" + fdate + "' AND '" + tdate + "'");
            
            
            if (finalArr.size() > 0){
                finalStatement += " WHERE";
                finalStatement += String.join("and", finalArr);
            }
            System.out.println(finalStatement);  
            try{
                TransactionTableModel.setRowCount(0);
                try{
                    rs = KsuFinal.con.createStatement().executeQuery(finalStatement);
                    while(rs.next()){

                        String id = rs.getString("prodID");
                        String TranNo = rs.getString("TransactionNo");
                        String nm = rs.getString("Name");
                        String ct = rs.getString("Sub");
                        String qty = rs.getString("Quantity");
                        String ut = rs.getString("Unit");
                        String pr = String.format("%.2f", rs.getFloat("Price"));
                        String sb = rs.getString("SuppBranch");
                        String dt = rs.getString("Date");
                        String act = rs.getString("Action");
                        String tb = rs.getString("Transby");


                        if (Float.parseFloat(qty) < 0){
                            qty = String.valueOf(Float.parseFloat(qty) * -1);
                        }

                        String tp = String.format("%.2f",Float.parseFloat(pr) * Float.parseFloat(qty));

                        String[] item = {TranNo, id, dt, nm, ct, pr, qty, tp, ut, sb, act, tb};
                        TransactionTableModel.addRow(item);

                    }
//                        JOptionPane.showMessageDialog(null,"Filtered Successfully!");
                }
                catch(Exception e){
                    System.out.println(e);
                }
            }catch(NullPointerException ex){
                JOptionPane.showMessageDialog(null,"Please input a period or uncheck the Edit Period checkbox", "Error", JOptionPane.ERROR_MESSAGE);
            }
                
//            }else{
//                TransactionTableModel.setRowCount(0);
//                try{
//                    rs = KsuFinal.con.createStatement().executeQuery(finalStatement);
//                    while(rs.next()){
//
//                        String id = rs.getString("prodID");
//                        String TranNo = rs.getString("TransactionNo");
//                        String nm = rs.getString("Name");
//                        String ct = rs.getString("Sub");
//                        String qty = rs.getString("Quantity");
//                        String ut = rs.getString("Unit"); 
//                        String pr = rs.getString("Price");
//                        String sb = rs.getString("SuppBranch");
//                        String dt = rs.getString("Date");
//                        String act = rs.getString("Action");
//                        String tb = rs.getString("Transby");
//                        
//                        if (Float.parseFloat(qty) < 0){
//                            qty = String.valueOf(Float.parseFloat(qty) * -1);
//                        }
//
//                        String tp = String.valueOf(Float.parseFloat(pr) * Float.parseFloat(qty));
//
//                        String[] item = {TranNo, id, dt, nm, ct, pr, qty, tp, ut, sb, act, tb};
//                        TransactionTableModel.addRow(item);
//
//                        
//                    }
////                    JOptionPane.showMessageDialog(null,"Filtered Successfully!");
//                }
//                catch(Exception e){
//                    System.out.println(e);
//                }
//            }
            
        }
    }
    
    
    private void CategoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoryBtnActionPerformed
        sortCategoryClass.setVisible(true);
        sortCategoryClass.setDefaultCloseOperation(sortCategoryClass.HIDE_ON_CLOSE);
        sortCategoryClass.openWindowAction();
    }//GEN-LAST:event_CategoryBtnActionPerformed

    private void withdrawCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawCBActionPerformed
        filterFunction();
    }//GEN-LAST:event_withdrawCBActionPerformed

    private void deliveryCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deliveryCBActionPerformed
        filterFunction();
    }//GEN-LAST:event_deliveryCBActionPerformed

    private void changePeriodBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePeriodBtnActionPerformed
        filterFunction();
    }//GEN-LAST:event_changePeriodBtnActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        Login.MenuClass.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        // TODO add your handling code here:

    }//GEN-LAST:event_formWindowGainedFocus

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
//        DefaultTableModel transactionTableModel = (DefaultTableModel) TransactionTable.getModel();    
//        updateTransReportTable();
    }//GEN-LAST:event_formWindowActivated

    private void questionMarkIconMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_questionMarkIconMouseEntered
        instructionDialogue.setVisible(true);
    }//GEN-LAST:event_questionMarkIconMouseEntered

    private void questionMarkIconMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_questionMarkIconMouseExited
        // TODO add your handling code here:
        instructionDialogue.setVisible(false);
    }//GEN-LAST:event_questionMarkIconMouseExited

    private void userBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userBtnActionPerformed
        sortUserClass.setVisible(true);
        sortUserClass.setDefaultCloseOperation(sortUserClass.HIDE_ON_CLOSE);
        sortUserClass.openWindowAction();
    }//GEN-LAST:event_userBtnActionPerformed

    private void dateCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateCBActionPerformed
        LocalDate currentDate = LocalDate.now();
        
        if (dateCB.getSelectedItem().toString().equals("Today")){
            Date date1 = Date.from(currentDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            fromDateChooser.setDate(date1);
            toDateChooser.setDate(date1);
        }
        else if (dateCB.getSelectedItem().toString().equals("Yesterday")){
            LocalDate yesterdayDate = currentDate.minusDays(1);
            Date date1 = Date.from(yesterdayDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            fromDateChooser.setDate(date1);
            toDateChooser.setDate(date1);
        }
        
        else if (dateCB.getSelectedItem().toString().equals("This Week")){
            LocalDate lastWeekDate = currentDate.minusWeeks(1);
            Date date1 = Date.from(lastWeekDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            Date date2 = Date.from(currentDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            fromDateChooser.setDate(date1);
            toDateChooser.setDate(date2);
        }
        
        else if (dateCB.getSelectedItem().toString().equals("This Month")){
            LocalDate lastMonthDate = currentDate.minusMonths(1);
            Date date1 = Date.from(lastMonthDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            Date date2 = Date.from(currentDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            fromDateChooser.setDate(date1);
            toDateChooser.setDate(date2);
        }
        
        else if (dateCB.getSelectedItem().toString().equals("This Year")){
            LocalDate lastYearDate = currentDate.minusYears(1);
            Date date1 = Date.from(lastYearDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            Date date2 = Date.from(currentDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            fromDateChooser.setDate(date1);
            toDateChooser.setDate(date2);
        }
        
        
    }//GEN-LAST:event_dateCBActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        sortBSClass.BSSortStatement = "";
        sortCategoryClass.categorySortStatement = "";
        sortproductClass.prodSortStatement = "";
        sortUOMClass.UOMSortStatement = "";
        sortUserClass.UserSortStatement = "";
        
        
        BSSelectedAll = true;
        CategorySelectedAll = true;
        ProductSelectedAll = true;
        UOMSelectedAll = true;
        UserSelectedAll = true;
        
        dateCB.setSelectedItem("This Week");
        
        LocalDate currentDate = LocalDate.now();
        LocalDate lastWeekDate = currentDate.minusWeeks(1);
        Date date1 = Date.from(lastWeekDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
        Date date2 = Date.from(currentDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
        fromDateChooser.setDate(date1);
        toDateChooser.setDate(date2);

        filterFunction();
        
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    public static void updateTransReportTable(){
        DefaultTableModel TransactionTableModel = (DefaultTableModel) TransactionTable.getModel();
        TransactionTableModel.setRowCount(0);
        try{
            String finalStatement = "SELECT * FROM expenses.producttrans";
            
//            if (!Login.admin){
//                System.out.println("User is admin");
//                finalStatement += " WHERE Transby = '" + Login.fullName + "'";
//            }
            ResultSet rs = KsuFinal.con.createStatement().executeQuery(finalStatement);
            while(rs.next()){
                
                String id = rs.getString("prodID");
                String TranNo = rs.getString("TransactionNo");
                String nm = rs.getString("Name");
                String ct = rs.getString("Sub");
                String qty = rs.getString("Quantity");
                String ut = rs.getString("Unit");
                String pr = String.format("%.2f", rs.getFloat("Price"));
                String sb = rs.getString("SuppBranch");
                String dt = rs.getString("Date");
                String act = rs.getString("Action");
                String tb = rs.getString("Transby");


                if (Float.parseFloat(qty) < 0){
                    qty = String.valueOf(Float.parseFloat(qty) * -1);
                }

                String tp = String.format("%.2f",Float.parseFloat(pr) * Float.parseFloat(qty));
                String[] item = {TranNo, id, dt, nm, ct, pr, qty, tp, ut, sb, act, tb};
                TransactionTableModel.addRow(item);
//                System.out.println(TranNo);
            }  
        }
        catch(Exception e){
            System.out.println(e);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewTransactions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewTransactions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewTransactions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewTransactions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewTransactions().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BSBtn;
    private javax.swing.JButton CategoryBtn;
    public static javax.swing.JTable TransactionTable;
    private javax.swing.JButton UOMBtn;
    private java.awt.Button button1;
    private javax.swing.JButton changePeriodBtn;
    private javax.swing.JComboBox dateCB;
    public static javax.swing.JCheckBox deliveryCB;
    private javax.swing.JButton filterProdBtn;
    public static com.toedter.calendar.JDateChooser fromDateChooser;
    private javax.swing.JDialog instructionDialogue;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel questionMarkIcon;
    public static com.toedter.calendar.JDateChooser toDateChooser;
    private javax.swing.JButton userBtn;
    private javax.swing.JLabel userLabel;
    public static javax.swing.JCheckBox withdrawCB;
    // End of variables declaration//GEN-END:variables
}
